                                    ------------------
                                    Overview
                                    ------------------
                                    Brabenetz Harald
                                    ------------------
                                    11-05-2008
                                    ------------------

Settings4j library 1.0

 This documentation is related to the settings4j <<1.0>> release.

* THE PROBLEM

	When I make a Project, I must decide where the configuration settings will be stored.\
	There are many diffeneret solutions:
	
	* You can use SystemProperties on startup
	
	* You can store *.property and *.xml into the Classpath/FileSystem
	
	* You can get your Settings from a JNDI Context
	
	* You can get your Settings from a DB
	
	[]
	
	I was inspired by log4j:\
	The programmer says, that he want log some information.\
	It is everytime possible to simply change the target (FileSystem, DB, MailServer, ...)
	where the information ist logged out.\
	The Programmer must not care about it.

* THE SOLUTION

	For Settings, the Solution could be similar.\
	The Programmer says he want the settings for Key 'xyz', and should not care about where the Settings comes from.

* EXAMPLE

	* The <<Developer>> want the settings for Key 'com/mycompany/mycalculation/my-formula'
	
	* The <<Deployer>> define where and how the value will be placed.

** Developer

	Developer wants the settings for Key 'xyz'
	He create the following SettingsManager-Class:

--------------------------------------------
public class SettingsManager {
    private static final Settings SETTINGS = Settings.getSettings(SettingsManager.class);

    public static String getMyFormular() {
        return SETTINGS.getString("com/mycompany/mycalculation/my-formula");
    }
}
--------------------------------------------

** Deployer

	By default the Deployer can chose to configure the developers app with the SystemProperties, JNDI-Context or the Classpath (in this order).\
	He can also define his own settings4j.xml (e.g.: for Database-Configuration, Property-Files, write-access, etc...)

*** SystemProperties
	
	System Properties can be set as java.exe Argument (JAVA_OPTS):
	
--------------------------------------------
java -Dcom/mycompany/mycalculation/my-formula=a*a .....
--------------------------------------------
	
	You can also add SystemProperties on the Tomcat-Startup
	
--------------------------------------------
cd %TOMCAT_HOME%/bin
set JAVA_OPTS=-Dcom/mycompany/mycalculation/my-formula=a*a
startup.bat
--------------------------------------------
	
	With JBOSS you can set SystemProperties with mbeans: {{{http://docs.jboss.org/admin-devel/Chap10.html}org.jboss.varia.property.SystemPropertiesService}}
	
--------------------------------------------
<server>
	<mbean code="org.jboss.varia.property.SystemPropertiesService" name="jboss.util:type=Service,name=SystemProperties">
		<attribute name="Properties">
			com/mycompany/mycalculation/my-formula=a*a
		</attribute>
	</mbean>
</server>
--------------------------------------------
	
*** JNDI-Context
	
	If you want access to the JNDI-Context. you must prepare your (Web) Application
	
	<<web.xml>>

	similar to the specification add a resource-ref into your web.xml like the following:

--------------------------------------------
	....
	....
	<resource-env-ref>
		<resource-env-ref-name>
			com/mycompany/mycalculation/my-formula
		</resource-env-ref-name>
		<resource-env-ref-type>java.lang.String</resource-env-ref-type>
	</resource-env-ref>
	....
</web-app>
--------------------------------------------

	
	<<Server specific deployment descriptors>>

	Dependents of the Server you must also place a XML Configuration into your webapp (rtm):
	
	* META-INF/context.xml (TOMCAT)
	
	* WEB-INF/jboss-web.xml (JBOSS)
	
	* WEB-INF/jetty-web.xml (Jetty)
	
	* WEB-INF/weblogic.xml (Weblogic)
	
	[]
	
	<<Tomcat Example>>
	
	Add the configuration-value into the server.xml
	
	%TOMCAT_HOME%/conf/server.xml 
	
--------------------------------------------
<Server ...>
	...
	<!-- Global JNDI resources -->
	<GlobalNamingResources>
		...
		<!-- Test calculation configuration-Path for demonstration purposes -->
		<Environment name="com/mycompany/mycalculation/my-formula" type="java.lang.String" value="a + a * a" />
	</GlobalNamingResources>
	...
	...
</Server>
--------------------------------------------
	
	Add the Tomcat-specific deployment descriptor to your webapp:
	
	META-INF/context.xml
	
--------------------------------------------
<Context path="/${artifactId}" docBase="${artifactId}" debug="0">
	<ResourceLink name="com/mycompany/mycalculation/my-formula" global="com/mycompany/mycalculation/my-formula" type="java.lang.String" />
</Context>
--------------------------------------------

*** Classpath
	
	The Key-Value can also be placed into the classpath:
	
[images/indexClasspath.gif] Beispiel Classpath-Configuration for key "com/mycompany/mycalculation/my-formula"
	
	