                                    ------------------
                                    Roadmap
                                    ------------------
                                    Brabenetz Harald
                                    ------------------
                                    20-05-2008
                                    ------------------

	<<Description>>
	
	Roadmap of changes for this project.

{Index}

%{toc}

{Roadmap:}

  	Changes are chronologically ordered from top (most recent) to bottom (least recent).

	! New Feature

	\* Bug fixed

	- General comment

* {2012/2013 1.1.0}

	Brainstorming:

	! additional Object-resolver with digester (Use a digester-Rules-XML to convert a XML to an Object)
	
	! additional Object-resolver with JaxB (Configure the Target-Class in property-File)

	! additional Content-resolver with VFSPath?


* {2012 - Final Version 1.0.0 - after few bug fixes}


    - remove DB-Connector implemented with Hibernate. This is most likely Project specific and should be implemented in your Project if required.
    
    ! improve PropertyFileConnector: Add JavaDoc and add additional setter "propertyFromPath" for configuration.

  
* {2012-07-01 1.0.0-beta6 - Add Settings4jContextLoader (Spring) and DefaultPropertiesLoader for web.xml}

	! add Log4jConfigurationLoader and Listener for web.xml. Each WebApp in your Servlet Container can
	have its own log4.xml configuration. You must only define an unique key for your webapp-log4j-config.

	! improve JavaDoc.

	! update Default settings4j.xml configuration: Add FSContentResolver and add SpringConfigObjectReolver.

	! add Settings4jContextLoader and Listener for web.xml (Configurable SpringContext in webapps)

	! add DefaultPropertiesLoader and Listener for web.xml (Define default Values for your properties in your web.xml)
  
* {2011-12-24 1.0.0-beta5 - PreferencesConnector and Settings4jPlaceholderConfigurer for Spring}
	
	! additional Settings4jPlaceholderConfigurer for Springframework.
	
		* {{http://springtips.blogspot.com/}}
	
		* {{http://www.mkyong.com/spring/spring-propertyplaceholderconfigurer-example/}}

	! additional Connector to Preferences:
	
		* {{http://java.sun.com/j2se/1.4.2/docs/api/java/util/prefs/Preferences.html}}
	
		* {{http://mindprod.com/jgloss/preferences.html}}
  
* {2011 - May 1.0.0-beta4 - settings4j goes to maven central repo}

	- update distributionManagement to sonatype-nexus. This will be synched to the public maven central repo.
  
* {2011 - 1.0.0-beta3 - refactored release}

	- Remove Setter. (The core-feature of settings4j is to GET Settings, the implementation is now much simpler.)

	! Additional Helper for the Springframework. see JavaDoc of org.settings4j.helper.spring.Settings4jFactoryBean.java
  
* {2009 - 1.0.0-beta2 - refactored release}

	- Remove Hirachical Structure. (it works, but without it, the usage is much simpler.)

	- Change of the Settings interface: setXXX(key, value) to: setXXX(key, value, connectorName);
	
	- Add Filter to Connectors, ContentResolver and ObjectResolvers

	- Add additional method: getConnectors() returns all Connectors
	
	- Add additional method: getConnector(ConnectorName) return the Connector for the given Name.

* {2008 - 6. July 1.0.0-beta - release with additional features:}

    ! Object-Resolver implementations with java.beans.XMLEncoder and XMLDecoder

    ! Object-Resolver implementations with {{{http://springframework.org/}Springframework}} (readonly, an object can only be set with setContent)

    ! A DB-Connector implemented with Hibernate, configurable with Settings4j over SystemProperties or JNDI-Envirenment-Variables.

    ! settings4j.xml: addictive="false" if no heredity of connectors are being requested.

    ! settings4j.xml: cached="true" A Wrapper for Settings, Connectors and ObjectResolvers to cache all requests.

    - Extend the Example-App to configure a DB-Connector. The {{{http://java.sun.com/j2se/1.4.2/docs/api/javax/sql/DataSource.html}DataSource}}-Object comes from JNDI-Context or with an ObjectResolver from FileSystemConnector.

    ! mappings configured in settings4j.xml: map one key to an other Key.


* {2008 - 12. May 1.0.0-alpha - release with following features:}

    ! Automatically read settings4j.xml from classpath if available

    ! Simple Default fall back Configuration if no settings4j.xml is found.

    ! Hirachical Structure in settings4j.xml like log4j

    ! Main Connector-Implementations: for SystemProperties, Classpath, JNDI-Context, PropertyFile

    - A Simple Example Module who can be use by a Commandline-Client or a web application. The module is configurable either with SystemProperties or JNDI-Envirenment-Variables depends on the settings4j.xml inside the two Client-Applications (jar or war)


* {2008 - 12. April}

	- Project start

	
* {March/April 2008}

	- {{{./roadmapTheBeginning.html}The beginning}}
	
	
	