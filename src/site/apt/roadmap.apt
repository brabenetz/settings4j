                                    ------------------
                                    Roadmap
                                    ------------------
                                    Brabenetz Harald
                                    ------------------
                                    20-05-2008
                                    ------------------

Roadmap of changes for this project.

  Changes are chronologically ordered from top (most recent) to bottom (least recent).

* Legend:

	! New Feature

	\* Bug fixed

	- General comment

* Winter 2008/2009 1.1.0

	Brainstorming:

	! additional Object-resolver with digester (Use a digester-Rules-XML to convert a XML to an Object)

	! additional Object-resolver with Spring (Use one or more springContext-XML to convert a XML to an Object)

	! additional Content-resolver with VFSPath?

	! additional Connector to Windows registry:
	
		* {{http://www.rgagnon.com/javadetails/java-0480.html}}
		
		* {{http://www.trustice.com/java/jnireg/}}

	! additional Connector to Preferences?:
	
		* {{http://java.sun.com/j2se/1.4.2/docs/api/java/util/prefs/Preferences.html}}
	
		* {{http://www.particle.kth.se/~lindsey/JavaCourse/Book/Part1/Java/Chapter10/Preferences.html}}


* September 2008 Final Version 1.0.0 - after few bug fixes



* 10. August 2008 1.0.0-rc - re factored release

    - extended JavaDoc and UnitTests

    - Maven-Site
    
    - Simple standalone WebApp to modify Settings (set new String-Values or upload files per Key). This App should be seperated in two modules
    	
    	* Core-Module: The main businesslogic who can be simbly integrated in existence applications. The List of keys who are used by your Apps should be configurabel with Settings4j itself.
    	
    	* GUI-Module: a simple webGUI with Struts and Tiles and ACEGI-Security as Example who the Core-Module can be integrated. But the resulting WAR can be used immediately as Setup-GUI for your Webapp.
    	

* 6. Juli 2008 1.0.0-beta - release with additional features:

    ! Object-Resolver implementations with java.beans.XMLEncoder and XMLDecoder

    ! Object-Resolver implementations with {{{http://springframework.org/}Springframework}} (readonly, an object can only be set with setContent)

    ! A DB-Connector implemented with Hibernate, configurable with Settings4j over SystemProperties or JNDI-Envirenment-Variables.

    ! settings4j.xml: addictive="false" if no heredity of connectors are being requested.

    ! settings4j.xml: cached="true" A Wrapper for Settings, Connectors and ObjectResolvers to cache all requests.

    - Extend the Example-App to configure a DB-Connector. The {{{http://java.sun.com/j2se/1.4.2/docs/api/javax/sql/DataSource.html}DataSource}}-Object comes from JNDI-Context or with an ObjectResolver from FileSystemConnector.

    ! mappings configured in settings4j.xml: map one key to an other Key.

	! additional Connector to Environment Variables:
	
	! Helper Class for SpringFramework:
	
		* like org.springframework.jndi.JndiObjectFactoryBean {{http://static.springframework.org/spring/docs/2.5.4/reference/cci.html}}


* 12. May 2008 1.0.0-alpha - release with following features:

    ! Automatically read settings4j.xml from classpath if available

    ! Simple Default fall back Configuration if no settings4j.xml is found.

    ! Hirachical Structure in settings4j.xml like log4j

    ! Main Connector-Implementations: for SystemProperties, Classpath, JNDI-Context, PropertyFile

    - A Simple Example Module who can be use by a Commandline-Client or a web application. The module is configurable either with SystemProperties or JNDI-Envirenment-Variables depends on the settings4j.xml inside the two Client-Applications (jar or war)


* 12. April 2008
	- Project start

	
* March/April 2008

	- {{{roadmapTheBeginning.html}The beginning}}
	
	
	